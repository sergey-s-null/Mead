<#@ template language="C#" #>
<#@ output extension=".proto" encoding="utf-8" #>
<#@ assembly name="$(SolutionDir)\Mead.MusicBee.MetaInfo\bin\Debug\net472\Mead.MusicBee.MetaInfo.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Mead.MusicBee.MetaInfo.Extensions" #>
<#@ import namespace="Mead.MusicBee.MetaInfo.Helpers" #>
<#@ import namespace="Mead.MusicBee.MetaInfo.Services" #>
<#
    var protoNamingService = new ProtobufNamingService(
        "google.protobuf.Empty",
        "_Request",
        "_Response");
    var methods = MetaInfoProvider
        .GetMethodsWithoutRestrictions()
        .Select(x => new
        {
            Definition = x,
            ProtoRequestType = protoNamingService.GetRequestMessageType(x),
            ProtoResponseType = protoNamingService.GetResponseMessageType(x)
        })
        .ToList();
#>
//-------------------------
// Autogenerated using t4 |
//-------------------------
syntax = "proto3";

import "google/protobuf/empty.proto";

service MusicBeeApiService {
<#
    foreach (var method in methods)
    {
        var requestType = method.ProtoRequestType;
        var responseType = method.ProtoResponseType;
#>
  rpc <#= method.Definition.Name #>(<#= requestType #>)
      returns(<#= responseType #>);
<#
    }
#>
}
<#
    foreach (var method in methods)
    {
        if (method.Definition.HasInputParameters())
        {
#>

message <#= method.ProtoRequestType #> {
<#
            var i = 1;
            foreach (var parameter in method.Definition.InputParameters)
            {
                var parameterProtoType = ProtobufTypesHelper.GetProtoType(parameter.Type);
#>
  <#= parameterProtoType #> <#= parameter.Name #> = <#= i #>;
<#
                i++;
            }
#>
}
<#
        }

        if (method.Definition.HasAnyOutputParameters())
        {
            var i = 1;
#>

message <#= method.ProtoResponseType #> {
<#
            if (method.Definition.HasReturnType())
            {
                var returnProtoType = ProtobufTypesHelper.GetProtoType(method.Definition.ReturnParameter.Type);
#>
  <#= returnProtoType #> result = <#= i #>;
<#
                i++;
            }

            foreach (var parameter in method.Definition.OutputParameters)
            {
                var parameterProtoType = ProtobufTypesHelper.GetProtoType(parameter.Type);
#>
  <#= parameterProtoType #> <#= parameter.Name #> = <#= i #>;
<#
                i++;
            }
#>
}
<#
        }
    }
#>

