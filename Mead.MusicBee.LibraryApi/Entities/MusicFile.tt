<#@ template language="C#" #>
<#@ assembly name="$(SolutionDir)\Mead.MusicBee.MetaInfo\bin\Debug\net472\Mead.MusicBee.MetaInfo.dll"#>
<#@ assembly name="$(SolutionDir)\Mead.MusicBee\bin\Debug\net472\Mead.MusicBee.dll"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Mead.MusicBee.MetaInfo.Enums" #>
<#@ import namespace="Mead.MusicBee.MetaInfo.Extensions" #>
<#@ import namespace="Mead.MusicBee.MetaInfo.Helpers" #>
<#
    var fieldsInfo = FieldsInfoProvider.GetFieldsInfo();
#>
using Mead.MusicBee.Api.Services.Abstract;
using Mead.MusicBee.Enums;
using Mead.MusicBee.LibraryApi.Entities.Abstract;
using Mead.MusicBee.LibraryApi.Enums;
using Mead.MusicBee.LibraryApi.Extensions;
using Mead.MusicBee.LibraryApi.Factories.Abstract;
using Mead.MusicBee.LibraryApi.Services.Abstract;

namespace Mead.MusicBee.LibraryApi.Entities;

public sealed class MusicFile : IMusicFile
{
    public string Path { get; }

    #region Fields
<#
    foreach (var fieldInfo in fieldsInfo)
    {
        var propertyType = fieldInfo.FieldType.GetCSharpType(false);
        var metaDataType = fieldInfo.MetaDataType.ToString();
        if (fieldInfo.FieldType != FieldType.Variant)
        {
            var getterMethodName = GetGetterMethodName(fieldInfo.FieldType);
            var setterMethodName = GetSetterMethodName(fieldInfo.FieldType);
#>

    public <#= propertyType #> <#= metaDataType #>
    {
        get => <#= getterMethodName #>(MetaDataType.<#= metaDataType #>);
        set => <#= setterMethodName #>(MetaDataType.<#= metaDataType #>, value);
    }
<#
        }
        else
        {
#>

    public <#= propertyType #> <#= metaDataType #> { get; }
<#
        }
    }
#>

    #endregion

    private readonly IMusicBeeApi _musicBeeApi;
    private readonly ReadOnlyMusicFileFactory _readOnlyMusicFileFactory;
    private readonly IMusicFileTypedTagsGetter _musicFileTypedTagsGetter;
    private readonly IMusicFileTypedTagsSetter _musicFileTypedTagsSetter;

    private readonly IDictionary<MetaDataType, string> _changedTagValues;
    private IReadOnlyMusicFile _musicFileSnapshot;

    public MusicFile(
        string path,
        IMusicBeeApi musicBeeApi,
        ReadOnlyMusicFileFactory readOnlyMusicFileFactory,
        MusicFileTypedTagsGetterFactory musicFileTypedTagsGetterFactory,
        MusicFileTypedTagsSetterFactory musicFileTypedTagsSetterFactory,
        VariantFieldFactory variantFieldFactory)
    {
        _musicBeeApi = musicBeeApi;
        _readOnlyMusicFileFactory = readOnlyMusicFileFactory;
        _musicFileTypedTagsGetter = musicFileTypedTagsGetterFactory(GetTagValue);
        _musicFileTypedTagsSetter = musicFileTypedTagsSetterFactory(SetTagValue);

        Path = path;

        #region Variant fields creation

<#
    foreach (var fieldInfo in fieldsInfo.Where(x => x.FieldType == FieldType.Variant))
    {
        var metaDataType = fieldInfo.MetaDataType.ToString();
#>
        <#= metaDataType #> = variantFieldFactory(
            () => GetTagValue(MetaDataType.<#= metaDataType #>),
            x => SetTagValue(MetaDataType.<#= metaDataType #>, x)
        );
<#
    }
#>

        #endregion

        _changedTagValues = new Dictionary<MetaDataType, string>();
        _musicFileSnapshot = _readOnlyMusicFileFactory(Path);
    }

    public string GetTagValue(MetaDataType metaDataType)
    {
        return _changedTagValues.TryGetValue(metaDataType, out var value)
            ? value
            : _musicFileSnapshot.GetTagValue(metaDataType);
    }

    public void SetTagValue(MetaDataType metaDataType, string value)
    {
        if (value == _musicFileSnapshot.GetTagValue(metaDataType))
        {
            _changedTagValues.Remove(metaDataType);
        }
        else
        {
            _changedTagValues[metaDataType] = value;
        }
    }

    public void Restore()
    {
        _changedTagValues.Clear();
    }

    public void Save()
    {
        foreach (var (metaDataType, value) in _changedTagValues)
        {
            _musicBeeApi.Library_SetFileTag(Path, metaDataType, value);
        }

        _musicBeeApi.Library_CommitTagsToFile(Path);

        _musicFileSnapshot = _readOnlyMusicFileFactory(Path);
    }
}
<#+
    private static string GetGetterMethodName(FieldType fieldType)
    {
        var classField = fieldType != FieldType.String
            ? "_musicFileTypedTagsGetter."
            : string.Empty;

        var method = fieldType switch {
            FieldType.String => "GetTagValue",
            FieldType.Bool => "GetBool",
            FieldType.Number => "GetNumber",
            FieldType.Date => "GetDate",
            FieldType.Enum => "GetEnum",
            FieldType.EncodedEnum => "GetEncodedEnum",
            FieldType.Rating => "GetRating",
            FieldType.LoveBanRating => "GetLoveBanRating",
            FieldType.Variant => throw new NotSupportedException(),
            _ => throw new ArgumentOutOfRangeException(nameof(fieldType), fieldType, null)
            };

        return $"{classField}{method}";
    }

    private static string GetSetterMethodName(FieldType fieldType)
    {
        var classField = fieldType != FieldType.String
            ? "_musicFileTypedTagsSetter."
            : string.Empty;

        var method = fieldType switch {
            FieldType.String => "SetTagValue",
            FieldType.Bool => "SetBool",
            FieldType.Number => "SetNumber",
            FieldType.Date => "SetDate",
            FieldType.Enum => "SetEnum",
            FieldType.EncodedEnum => "SetEncodedEnum",
            FieldType.Rating => "SetRating",
            FieldType.LoveBanRating => "SetLoveBanRating",
            FieldType.Variant => throw new NotSupportedException(),
            _ => throw new ArgumentOutOfRangeException(nameof(fieldType), fieldType, null)
            };

        return $"{classField}{method}";
    }
#>