<#@ template language="C#" #>
<#@ assembly name="$(SolutionDir)\Mead.MusicBee.MetaInfo\bin\Debug\net472\Mead.MusicBee.MetaInfo.dll"#>
<#@ assembly name="$(SolutionDir)\Mead.MusicBee\bin\Debug\net472\Mead.MusicBee.dll"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Mead.MusicBee.MetaInfo.Enums" #>
<#@ import namespace="Mead.MusicBee.MetaInfo.Extensions" #>
<#@ import namespace="Mead.MusicBee.MetaInfo.Helpers" #>
<#
    var fieldsInfo = FieldsInfoProvider.GetFieldsInfo();
#>
using Mead.MusicBee.Api.Services.Abstract;
using Mead.MusicBee.Enums;
using Mead.MusicBee.LibraryApi.Entities.Abstract;
using Mead.MusicBee.LibraryApi.Factories.Abstract;
using Mead.MusicBee.LibraryApi.Services.Abstract;

namespace Mead.MusicBee.LibraryApi.Entities;

public sealed class CachingReadOnlyMusicFile : IReadOnlyMusicFile
{
    public string Path { get; }

<#
    foreach (var fieldInfo in fieldsInfo)
    {
        var type = fieldInfo.FieldType.GetCSharpType(true);
        var metaDataType = fieldInfo.MetaDataType.ToString();
        var rightPart = fieldInfo.FieldType != FieldType.Variant
            ? $" => {GetMethodName(fieldInfo.FieldType)}(MetaDataType.{metaDataType});"
            : " { get; }";
#>
    public <#= type #> <#= metaDataType #><#= rightPart #>
<#
    }
#>

    private readonly IMusicBeeApi _musicBeeApi;
    private readonly IFieldValuesConverter _fieldValuesConverter;

    private readonly IDictionary<MetaDataType, string> _cachedTagValues;

    public CachingReadOnlyMusicFile(
        string path,
        IMusicBeeApi musicBeeApi,
        IFieldValuesConverter fieldValuesConverter,
        ReadOnlyVariantFieldFactory readOnlyVariantFieldFactory)
    {
        _musicBeeApi = musicBeeApi;
        _fieldValuesConverter = fieldValuesConverter;

<#
    foreach (var fieldInfo in fieldsInfo.Where(x => x.FieldType == FieldType.Variant))
    {
        var metaDataType = fieldInfo.MetaDataType.ToString();
#>
        <#= metaDataType #> = readOnlyVariantFieldFactory(() => GetTagValue(MetaDataType.<#= metaDataType #>));
<#
    }
#>

        _cachedTagValues = new Dictionary<MetaDataType, string>();

        Path = path;
    }

    public string GetTagValue(MetaDataType metaDataType)
    {
        if (_cachedTagValues.TryGetValue(metaDataType, out var value))
        {
            return value;
        }

        value = _musicBeeApi.Library_GetFileTag(Path, metaDataType);
        _cachedTagValues[metaDataType] = value;
        return value;
    }

    private bool GetBoolTagValue(MetaDataType metaDataType)
    {
        return _fieldValuesConverter.ConvertStringToBool(GetTagValue(metaDataType));
    }

    private long GetNumberTagValue(MetaDataType metaDataType)
    {
        return _fieldValuesConverter.ConvertStringToNumber(GetTagValue(metaDataType));
    }

    private DateTime GetDateTagValue(MetaDataType metaDataType)
    {
        return _fieldValuesConverter.ConvertStringToDate(GetTagValue(metaDataType));
    }

    private IReadOnlyList<string> GetEnumTagValue(MetaDataType metaDataType)
    {
        return _fieldValuesConverter.ConvertStringToEnum(GetTagValue(metaDataType));
    }

    private Rating GetRatingTagValue(MetaDataType metaDataType)
    {
        return _fieldValuesConverter.ConvertStringToRating(GetTagValue(metaDataType));
    }
}
<#+
    private static string GetMethodName(FieldType fieldType)
    {
        return fieldType switch {
            FieldType.String => "GetTagValue",
            FieldType.Bool => "GetBoolTagValue",
            FieldType.Number => "GetNumberTagValue",
            FieldType.Date => "GetDateTagValue",
            FieldType.Enum => "GetEnumTagValue",
            FieldType.Rating => "GetRatingTagValue",
            FieldType.Variant => throw new NotSupportedException(),
            _ => throw new ArgumentOutOfRangeException(nameof(fieldType), fieldType, null)
            };
    }
#>