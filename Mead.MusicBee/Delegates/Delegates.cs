// ReSharper disable InconsistentNaming

using System;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using Mead.MusicBee.Enums;

namespace Mead.MusicBee.Delegates;

public delegate void MB_ReleaseStringDelegate(string p1);
public delegate void MB_TraceDelegate(string p1);
public delegate IntPtr MB_WindowHandleDelegate();
public delegate void MB_RefreshPanelsDelegate();
public delegate void MB_SendNotificationDelegate(CallbackType type);
public delegate ToolStripItem MB_AddMenuItemDelegate(string menuPath, string hotkeyDescription, EventHandler handler);
public delegate bool MB_AddTreeNodeDelegate(string treePath, string name, Bitmap icon, EventHandler openHandler, EventHandler closeHandler);
public delegate void MB_RegisterCommandDelegate(string command, EventHandler handler);
public delegate void MB_CreateBackgroundTaskDelegate(ThreadStart taskCallback, Form owner);
public delegate void MB_CreateParameterisedBackgroundTaskDelegate(ParameterizedThreadStart taskCallback, object parameters, Form owner);
public delegate void MB_SetBackgroundTaskMessageDelegate(string message);
public delegate Rectangle MB_GetPanelBoundsDelegate(PluginPanelDock dock);
public delegate bool MB_SetPanelScrollableAreaDelegate(Control panel, Size scrollArea, bool alwaysShowScrollBar);
public delegate Control MB_AddPanelDelegate(Control panel, PluginPanelDock dock);
public delegate void MB_RemovePanelDelegate(Control panel);
public delegate string MB_GetLocalisationDelegate(string id, string defaultText);
public delegate bool MB_ShowNowPlayingAssistantDelegate();
public delegate bool MB_InvokeCommandDelegate(Command command, object parameter);
public delegate bool MB_OpenFilterInTabDelegate(MetaDataType field1, ComparisonType comparison1, string value1, MetaDataType field2, ComparisonType comparison2, string value2);
public delegate bool MB_SetWindowSizeDelegate(int width, int height);
public delegate bool MB_DownloadFileDelegate(string url, DownloadTarget target, string targetFolder, bool cancelDownload);
public delegate bool MB_GetVisualiserInformationDelegate(out string[] visualiserNames, out string defaultVisualiserName, out WindowState defaultState, out WindowState currentState);
public delegate bool MB_ShowVisualiserDelegate(string visualiserName, WindowState state);
public delegate bool MB_GetPluginViewInformationDelegate(string pluginFilename, out string[] viewNames, out string defaultViewName, out WindowState defaultState, out WindowState currentState);
public delegate bool MB_ShowPluginViewDelegate(string pluginFilename, string viewName, WindowState state);
public delegate bool MB_UninistallPluginDelegate(string pluginFilename, string password);
public delegate string Setting_GetFieldNameDelegate(MetaDataType field);
public delegate string Setting_GetPersistentStoragePathDelegate();
public delegate string Setting_GetSkinDelegate();
public delegate int Setting_GetSkinElementColourDelegate(SkinElement element, ElementState state, ElementComponent component);
public delegate bool Setting_IsWindowBordersSkinnedDelegate();
public delegate Font Setting_GetDefaultFontDelegate();
public delegate DataType Setting_GetDataTypeDelegate(MetaDataType field);
public delegate string Setting_GetLastFmUserIdDelegate();
public delegate string Setting_GetWebProxyDelegate();
public delegate bool Setting_GetValueDelegate(SettingId settingId, out object value);
public delegate string Setting_GetFileConvertCommandLineDelegate(FileCodec codec, EncodeQuality encodeQuality);
public delegate string Library_GetFilePropertyDelegate(string sourceFileUrl, FilePropertyType type);
public delegate string Library_GetFileTagDelegate(string sourceFileUrl, MetaDataType field);
public delegate bool Library_GetFileTagsDelegate(string sourceFileUrl, MetaDataType[] fields, out string[] results);
public delegate bool Library_SetFileTagDelegate(string sourceFileUrl, MetaDataType field, string value);
public delegate string Library_GetDevicePersistentIdDelegate(string sourceFileUrl, DeviceIdType idType);
public delegate bool Library_SetDevicePersistentIdDelegate(string sourceFileUrl, DeviceIdType idType, string value);
public delegate bool Library_FindDevicePersistentIdDelegate(DeviceIdType idType, string[] ids, out string[] values);
public delegate bool Library_CommitTagsToFileDelegate(string sourceFileUrl);
public delegate string Library_AddFileToLibraryDelegate(string sourceFileUrl, LibraryCategory category);
public delegate bool Library_GetSyncDeltaDelegate(string[] cachedFiles, DateTime updatedSince, LibraryCategory categories, out string[] newFiles, out string[] updatedFiles, out string[] deletedFiles);
public delegate string Library_GetLyricsDelegate(string sourceFileUrl, LyricsType type);
public delegate string Library_GetArtworkDelegate(string sourceFileUrl, int index);
public delegate bool Library_GetArtworkExDelegate(string sourceFileUrl, int index, bool retrievePictureData, out PictureLocations pictureLocations, out string pictureUrl, out byte[] imageData);
public delegate bool Library_SetArtworkExDelegate(string sourceFileUrl, int index, byte[] imageData);
public delegate string Library_GetArtistPictureDelegate(string artistName, int fadingPercent, int fadingColor);
public delegate bool Library_GetArtistPictureUrlsDelegate(string artistName, bool localOnly, out string[] urls);
public delegate string Library_GetArtistPictureThumbDelegate(string artistName);
public delegate bool Library_QueryFilesDelegate(string query);
public delegate string Library_QueryGetNextFileDelegate();
public delegate string Library_QueryGetAllFilesDelegate();
public delegate bool Library_QueryFilesExDelegate(string query, out string[]? files);
public delegate string Library_QuerySimilarArtistsDelegate(string artistName, double minimumArtistSimilarityRating);
public delegate bool Library_QueryLookupTableDelegate(string keyTags, string valueTags, string query);
public delegate string Library_QueryGetLookupTableValueDelegate(string key);
public delegate int Player_GetPositionDelegate();
public delegate bool Player_SetPositionDelegate(int position);
public delegate PlayState Player_GetPlayStateDelegate();
public delegate bool Player_GetButtonEnabledDelegate(PlayButtonType button);
public delegate bool Player_ActionDelegate();
public delegate int Player_QueueRandomTracksDelegate(int count);
public delegate float Player_GetVolumeDelegate();
public delegate bool Player_SetVolumeDelegate(float volume);
public delegate bool Player_GetMuteDelegate();
public delegate bool Player_SetMuteDelegate(bool mute);
public delegate bool Player_GetShuffleDelegate();
public delegate bool Player_SetShuffleDelegate(bool shuffle);
public delegate RepeatMode Player_GetRepeatDelegate();
public delegate bool Player_SetRepeatDelegate(RepeatMode repeat);
public delegate bool Player_GetEqualiserEnabledDelegate();
public delegate bool Player_SetEqualiserEnabledDelegate(bool enabled);
public delegate bool Player_GetDspEnabledDelegate();
public delegate bool Player_SetDspEnabledDelegate(bool enabled);
public delegate bool Player_GetScrobbleEnabledDelegate();
public delegate bool Player_SetScrobbleEnabledDelegate(bool enabled);
public delegate bool Player_GetShowTimeRemainingDelegate();
public delegate bool Player_GetShowRatingTrackDelegate();
public delegate bool Player_GetShowRatingLoveDelegate();
public delegate bool Player_ShowEqualiserDelegate();
public delegate bool Player_GetAutoDjEnabledDelegate();
public delegate bool Player_GetStopAfterCurrentEnabledDelegate();
public delegate bool Player_GetCrossfadeDelegate();
public delegate bool Player_SetCrossfadeDelegate(bool crossfade);
public delegate ReplayGainMode Player_GetReplayGainModeDelegate();
public delegate bool Player_SetReplayGainModeDelegate(ReplayGainMode mode);
public delegate int Player_OpenStreamHandleDelegate(string url, bool useMusicBeeSettings, bool enableDsp, ReplayGainMode gainType);
public delegate bool Player_UpdatePlayStatisticsDelegate(string url, PlayStatisticType countType, bool disableScrobble);
public delegate bool Player_GetOutputDevicesDelegate(out string[] deviceNames, out string activeDeviceName);
public delegate bool Player_SetOutputDeviceDelegate(string deviceName);
public delegate string NowPlaying_GetFileUrlDelegate();
public delegate int NowPlaying_GetDurationDelegate();
public delegate string NowPlaying_GetFilePropertyDelegate(FilePropertyType type);
public delegate string NowPlaying_GetFileTagDelegate(MetaDataType field);
public delegate bool NowPlaying_GetFileTagsDelegate(MetaDataType[] fields, out string[] results);
public delegate string NowPlaying_GetLyricsDelegate();
public delegate string NowPlaying_GetArtworkDelegate();
public delegate string NowPlaying_GetArtistPictureDelegate(int fadingPercent);
public delegate bool NowPlaying_GetArtistPictureUrlsDelegate(bool localOnly, out string[] urls);
public delegate string NowPlaying_GetArtistPictureThumbDelegate();
public delegate bool NowPlaying_IsSoundtrackDelegate();
public delegate int NowPlaying_GetSpectrumDataDelegate(float[] fftData);
public delegate bool NowPlaying_GetSoundGraphDelegate(float[] graphData);
public delegate bool NowPlaying_GetSoundGraphExDelegate(float[] graphData, float[] peakData);
public delegate int NowPlayingList_GetCurrentIndexDelegate();
public delegate int NowPlayingList_GetNextIndexDelegate(int offset);
public delegate bool NowPlayingList_IsAnyPriorTracksDelegate();
public delegate bool NowPlayingList_IsAnyFollowingTracksDelegate();
public delegate string NowPlayingList_GetFileUrlDelegate(int index);
public delegate string NowPlayingList_GetFilePropertyDelegate(int index, FilePropertyType type);
public delegate string NowPlayingList_GetFileTagDelegate(int index, MetaDataType field);
public delegate bool NowPlayingList_GetFileTagsDelegate(int index, MetaDataType[] fields, out string[] results);
public delegate bool NowPlayingList_ActionDelegate();
public delegate bool NowPlayingList_FileActionDelegate(string sourceFileUrl);
public delegate bool NowPlayingList_FilesActionDelegate(string[] sourceFileUrl);
public delegate bool NowPlayingList_RemoveAtDelegate(int index);
public delegate bool NowPlayingList_MoveFilesDelegate(int[] fromIndices, int toIndex);
public delegate string Playlist_GetNameDelegate(string playlistUrl);
public delegate PlaylistFormat Playlist_GetTypeDelegate(string playlistUrl);
public delegate bool Playlist_QueryPlaylistsDelegate();
public delegate string Playlist_QueryGetNextPlaylistDelegate();
public delegate bool Playlist_IsInListDelegate(string playlistUrl, string filename);
public delegate bool Playlist_QueryFilesDelegate(string playlistUrl);
public delegate bool Playlist_QueryFilesExDelegate(string playlistUrl, out string[] filenames);
public delegate string Playlist_CreatePlaylistDelegate(string folderName, string playlistName, string[] filenames);
public delegate bool Playlist_DeletePlaylistDelegate(string playlistUrl);
public delegate bool Playlist_SetFilesDelegate(string playlistUrl, string[] filenames);
public delegate bool Playlist_AddFilesDelegate(string playlistUrl, string[] filenames);
public delegate bool Playlist_RemoveAtDelegate(string playlistUrl, int index);
public delegate bool Playlist_MoveFilesDelegate(string playlistUrl, int[] fromIndices, int toIndex);
public delegate bool Playlist_PlayNowDelegate(string playlistUrl);
public delegate string Pending_GetFileUrlDelegate();
public delegate string Pending_GetFilePropertyDelegate(FilePropertyType field);
public delegate string Pending_GetFileTagDelegate(MetaDataType field);
public delegate bool Podcasts_QuerySubscriptionsDelegate(string query, out string[] ids);
public delegate bool Podcasts_GetSubscriptionDelegate(string id, out string[] subscription);
public delegate bool Podcasts_GetSubscriptionArtworkDelegate(string id, int index, out byte[] imageData);
public delegate bool Podcasts_GetSubscriptionEpisodesDelegate(string id, out string[] urls);
public delegate bool Podcasts_GetSubscriptionEpisodeDelegate(string id, int index, out string[] episode);
public delegate string Sync_FileStartDelegate(string filename);
public delegate void Sync_FileEndDelegate(string filename, bool success, string errorMessage);