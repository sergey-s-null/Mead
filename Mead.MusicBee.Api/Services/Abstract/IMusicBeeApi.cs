//-------------------------
// Autogenerated using t4 |
//-------------------------

using System.Drawing;
using System.Windows.Forms;
using Mead.MusicBee.Enums;

namespace Mead.MusicBee.Api.Services.Abstract;

public interface IMusicBeeApi
{
    void MB_ReleaseString(string p1);
    void MB_Trace(string p1);
    string Setting_GetPersistentStoragePath();
    string Setting_GetSkin();
    int Setting_GetSkinElementColour(SkinElement element, ElementState state, ElementComponent component);
    bool Setting_IsWindowBordersSkinned();
    string Library_GetFileProperty(string sourceFileUrl, FilePropertyType type);
    string Library_GetFileTag(string sourceFileUrl, MetaDataType field);
    bool Library_SetFileTag(string sourceFileUrl, MetaDataType field, string value);
    bool Library_CommitTagsToFile(string sourceFileUrl);
    string Library_GetLyrics(string sourceFileUrl, LyricsType type);
    bool Library_QueryFiles(string query);
    string Library_QueryGetNextFile();
    int Player_GetPosition();
    bool Player_SetPosition(int position);
    PlayState Player_GetPlayState();
    bool Player_PlayPause();
    bool Player_Stop();
    bool Player_StopAfterCurrent();
    bool Player_PlayPreviousTrack();
    bool Player_PlayNextTrack();
    bool Player_StartAutoDj();
    bool Player_EndAutoDj();
    float Player_GetVolume();
    bool Player_SetVolume(float volume);
    bool Player_GetMute();
    bool Player_SetMute(bool mute);
    bool Player_GetShuffle();
    bool Player_SetShuffle(bool shuffle);
    RepeatMode Player_GetRepeat();
    bool Player_SetRepeat(RepeatMode repeat);
    bool Player_GetEqualiserEnabled();
    bool Player_SetEqualiserEnabled(bool enabled);
    bool Player_GetDspEnabled();
    bool Player_SetDspEnabled(bool enabled);
    bool Player_GetScrobbleEnabled();
    bool Player_SetScrobbleEnabled(bool enabled);
    string NowPlaying_GetFileUrl();
    int NowPlaying_GetDuration();
    string NowPlaying_GetFileProperty(FilePropertyType type);
    string NowPlaying_GetFileTag(MetaDataType field);
    string NowPlaying_GetLyrics();
    string NowPlaying_GetArtwork();
    bool NowPlayingList_Clear();
    bool NowPlayingList_QueryFiles(string query);
    string NowPlayingList_QueryGetNextFile();
    bool NowPlayingList_PlayNow(string sourceFileUrl);
    bool NowPlayingList_QueueNext(string sourceFileUrl);
    bool NowPlayingList_QueueLast(string sourceFileUrl);
    bool NowPlayingList_PlayLibraryShuffled();
    bool Playlist_QueryPlaylists();
    string Playlist_QueryGetNextPlaylist();
    PlaylistFormat Playlist_GetType(string playlistUrl);
    bool Playlist_QueryFiles(string playlistUrl);
    string Playlist_QueryGetNextFile();
    void MB_RefreshPanels();
    void MB_SendNotification(CallbackType type);
    string Setting_GetFieldName(MetaDataType field);
    void MB_SetBackgroundTaskMessage(string message);
    bool Player_GetShowTimeRemaining();
    int NowPlayingList_GetCurrentIndex();
    string NowPlayingList_GetListFileUrl(int index);
    string NowPlayingList_GetFileProperty(int index, FilePropertyType type);
    string NowPlayingList_GetFileTag(int index, MetaDataType field);
    int NowPlaying_GetSpectrumData(float[] fftData);
    bool NowPlaying_GetSoundGraph(float[] graphData);
    string MB_GetLocalisation(string id, string defaultText);
    bool NowPlayingList_IsAnyPriorTracks();
    bool NowPlayingList_IsAnyFollowingTracks();
    bool Player_ShowEqualiser();
    bool Player_GetAutoDjEnabled();
    bool Player_GetStopAfterCurrentEnabled();
    bool Player_GetCrossfade();
    bool Player_SetCrossfade(bool crossfade);
    ReplayGainMode Player_GetReplayGainMode();
    bool Player_SetReplayGainMode(ReplayGainMode mode);
    int Player_QueueRandomTracks(int count);
    DataType Setting_GetDataType(MetaDataType field);
    int NowPlayingList_GetNextIndex(int offset);
    string NowPlaying_GetArtistPicture(int fadingPercent);
    string NowPlaying_GetDownloadedArtwork();
    bool MB_ShowNowPlayingAssistant();
    string NowPlaying_GetDownloadedLyrics();
    bool Player_GetShowRatingTrack();
    bool Player_GetShowRatingLove();
    string Setting_GetLastFmUserId();
    string Playlist_GetName(string playlistUrl);
    string Playlist_CreatePlaylist(string folderName, string playlistName, string[] filenames);
    bool Playlist_SetFiles(string playlistUrl, string[] filenames);
    string Library_QuerySimilarArtists(string artistName, double minimumArtistSimilarityRating);
    bool Library_QueryLookupTable(string keyTags, string valueTags, string query);
    string Library_QueryGetLookupTableValue(string key);
    bool NowPlayingList_QueueFilesNext(string[] sourceFileUrl);
    bool NowPlayingList_QueueFilesLast(string[] sourceFileUrl);
    string Setting_GetWebProxy();
    bool NowPlayingList_RemoveAt(int index);
    bool Playlist_RemoveAt(string playlistUrl, int index);
    bool MB_OpenFilterInTab(MetaDataType field1, ComparisonType comparison1, string value1, MetaDataType field2, ComparisonType comparison2, string value2);
    bool MB_SetWindowSize(int width, int height);
    string Library_GetArtistPicture(string artistName, int fadingPercent, int fadingColor);
    string Pending_GetFileUrl();
    string Pending_GetFileProperty(FilePropertyType field);
    string Pending_GetFileTag(MetaDataType field);
    bool Player_GetButtonEnabled(PlayButtonType button);
    bool NowPlayingList_MoveFiles(int[] fromIndices, int toIndex);
    string Library_GetArtworkUrl(string sourceFileUrl, int index);
    string Library_GetArtistPictureThumb(string artistName);
    string NowPlaying_GetArtworkUrl();
    string NowPlaying_GetDownloadedArtworkUrl();
    string NowPlaying_GetArtistPictureThumb();
    bool Playlist_IsInList(string playlistUrl, string filename);
    bool Library_GetArtistPictureUrls(string artistName, bool localOnly, out string[] urls);
    bool NowPlaying_GetArtistPictureUrls(bool localOnly, out string[] urls);
    bool Playlist_AppendFiles(string playlistUrl, string[] filenames);
    string Sync_FileStart(string filename);
    void Sync_FileEnd(string filename, bool success, string errorMessage);
    bool Library_QueryFilesEx(string query, out string[]? files);
    bool NowPlayingList_QueryFilesEx(string query, out string[]? files);
    bool Playlist_QueryFilesEx(string playlistUrl, out string[] filenames);
    bool Playlist_MoveFiles(string playlistUrl, int[] fromIndices, int toIndex);
    bool Playlist_PlayNow(string playlistUrl);
    bool NowPlaying_IsSoundtrack();
    bool NowPlaying_GetSoundtrackPictureUrls(bool localOnly, out string[] urls);
    string Library_GetDevicePersistentId(string sourceFileUrl, DeviceIdType idType);
    bool Library_SetDevicePersistentId(string sourceFileUrl, DeviceIdType idType, string value);
    bool Library_FindDevicePersistentId(DeviceIdType idType, string[] ids, out string[] values);
    string Library_AddFileToLibrary(string sourceFileUrl, LibraryCategory category);
    bool Playlist_DeletePlaylist(string playlistUrl);
    bool Library_GetFileTags(string sourceFileUrl, MetaDataType[] fields, out string[] results);
    bool NowPlaying_GetFileTags(MetaDataType[] fields, out string[] results);
    bool NowPlayingList_GetFileTags(int index, MetaDataType[] fields, out string[] results);
    bool MB_DownloadFile(string url, DownloadTarget target, string targetFolder, bool cancelDownload);
    string Setting_GetFileConvertCommandLine(FileCodec codec, EncodeQuality encodeQuality);
    int Player_OpenStreamHandle(string url, bool useMusicBeeSettings, bool enableDsp, ReplayGainMode gainType);
    bool Player_UpdatePlayStatistics(string url, PlayStatisticType countType, bool disableScrobble);
    bool Library_GetArtworkEx(string sourceFileUrl, int index, bool retrievePictureData, out PictureLocations pictureLocations, out string pictureUrl, out byte[] imageData);
    bool Library_SetArtworkEx(string sourceFileUrl, int index, byte[] imageData);
    bool MB_GetVisualiserInformation(out string[] visualiserNames, out string defaultVisualiserName, out WindowState defaultState, out WindowState currentState);
    bool MB_ShowVisualiser(string visualiserName, WindowState state);
    bool MB_GetPluginViewInformation(string pluginFilename, out string[] viewNames, out string defaultViewName, out WindowState defaultState, out WindowState currentState);
    bool MB_ShowPluginView(string pluginFilename, string viewName, WindowState state);
    bool Player_GetOutputDevices(out string[] deviceNames, out string activeDeviceName);
    bool Player_SetOutputDevice(string deviceName);
    bool MB_UninstallPlugin(string pluginFilename, string password);
    bool Player_PlayPreviousAlbum();
    bool Player_PlayNextAlbum();
    bool Podcasts_QuerySubscriptions(string query, out string[] ids);
    bool Podcasts_GetSubscription(string id, out string[] subscription);
    bool Podcasts_GetSubscriptionArtwork(string id, int index, out byte[] imageData);
    bool Podcasts_GetSubscriptionEpisodes(string id, out string[] urls);
    bool Podcasts_GetSubscriptionEpisode(string id, int index, out string[] episode);
    bool NowPlaying_GetSoundGraphEx(float[] graphData, float[] peakData);
    string Sync_FileDeleteStart(string filename);
    void Sync_FileDeleteEnd(string filename, bool success, string errorMessage);
    IntPtr MB_GetWindowHandle();
    ToolStripItem MB_AddMenuItem(string menuPath, string hotkeyDescription, EventHandler handler);
    void MB_CreateBackgroundTask(ThreadStart taskCallback, Form owner);
    void MB_RegisterCommand(string command, EventHandler handler);
    Font Setting_GetDefaultFont();
    Rectangle MB_GetPanelBounds(PluginPanelDock dock);
    Control MB_AddPanel(Control panel, PluginPanelDock dock);
    void MB_RemovePanel(Control panel);
    void MB_CreateParameterisedBackgroundTask(ParameterizedThreadStart taskCallback, object parameters, Form owner);
    bool MB_SetPanelScrollableArea(Control panel, Size scrollArea, bool alwaysShowScrollBar);
    bool MB_InvokeCommand(Command command, object parameter);
    bool Setting_GetValue(SettingId settingId, out object value);
    bool Library_GetSyncDelta(string[] cachedFiles, DateTime updatedSince, LibraryCategory categories, out string[] newFiles, out string[] updatedFiles, out string[] deletedFiles);
    bool MB_AddTreeNode(string treePath, string name, Bitmap icon, EventHandler openHandler, EventHandler closeHandler);
}